{"version":3,"file":"index.jspatpkg.js","mappings":"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;AACA,iCAAiC,+BAA+B;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;;;AAGtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D,OAAO;AAClE;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D,OAAO;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,+CAA+C,EAAE,aAAa,EAAE;AAChE;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4DAA4D,OAAO;AACnE;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;;AAE7B;;AAEA,8BAA8B;AAC9B;AACA,cAAc,OAAO;AACrB;;AAEA;AACA,gEAAgE;AAChE,kBAAkB;AAClB,kEAAkE;AAClE,kBAAkB;AAClB,mEAAmE;AACnE;;AAEA,wDAAwD;AACxD;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA,qCAAqC;AACrC,uDAAuD;AACvD;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,IAAI,IAA6B;AACjC;AACA;;;;;;;;;;;;;;;;;UCl1BA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AAEA,iEAAe,YAAY;AACvB,SAAO;AACH,yBAAqBI,+DADlB;AAEH,yBAAqBrC,+DAFlB;AAGH,cAAUhD,0DAHP;AAIH,qBAAiBkF,0DAJd;AAKH,oBAAgBF,yDAAWA;AALxB,GAAP;AAOH,CARD,E","sources":["webpack://@jspatcher/package-analysers/./src/index.ts","webpack://@jspatcher/package-analysers/./src/objects/base.ts","webpack://@jspatcher/package-analysers/./src/objects/default.ts","webpack://@jspatcher/package-analysers/./src/objects/oscilloscope.ts","webpack://@jspatcher/package-analysers/./src/objects/spectral-analyser.ts","webpack://@jspatcher/package-analysers/./src/objects/spectrogram.ts","webpack://@jspatcher/package-analysers/./src/objects/spectroscope.ts","webpack://@jspatcher/package-analysers/./src/objects/temporal-analyser.ts","webpack://@jspatcher/package-analysers/./src/package-info.ts","webpack://@jspatcher/package-analysers/./src/sdk.ts","webpack://@jspatcher/package-analysers/./src/ui/oscilloscope.ts","webpack://@jspatcher/package-analysers/./src/ui/spectrogram.ts","webpack://@jspatcher/package-analysers/./src/ui/spectroscope.ts","webpack://@jspatcher/package-analysers/./node_modules/color-js/color.js","webpack://@jspatcher/package-analysers/webpack/bootstrap","webpack://@jspatcher/package-analysers/webpack/runtime/compat get default export","webpack://@jspatcher/package-analysers/webpack/runtime/create fake namespace object","webpack://@jspatcher/package-analysers/webpack/runtime/define property getters","webpack://@jspatcher/package-analysers/webpack/runtime/hasOwnProperty shorthand","webpack://@jspatcher/package-analysers/webpack/runtime/make namespace object","webpack://@jspatcher/package-analysers/./src/index.jspatpkg.ts"],"sourcesContent":["import packageInfo from \"./package-info\";\r\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\r\n\r\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\r\n\r\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\r\n\r\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;","import { author, name, version, description } from \"../index\";\r\nimport { BaseObject } from \"../sdk\";\r\n\r\nexport default class BaseAnalyserObject<D = {}, S = {}, I extends any[] = any[], O extends any[] = any[], A extends any[] = any[], P = {}, U = {}> extends BaseObject<D, S, I, O, A, P, U> {\r\n    static package = name;\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n}\r\n","import { author, name, version, description } from \"../index\";\r\nimport { DefaultObject } from \"../sdk\";\r\n\r\nexport default class DefaultAnalyserObject<D = {}, S = {}, I extends any[] = any[], O extends any[] = any[], A extends any[] = any[], P = {}, U = {}> extends DefaultObject<D, S, I, O, A, P, U> {\r\n    static package = name;\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n}\r\n","import BaseAnalyserObject from \"./base\";\r\nimport OscilloscopeUI from \"../ui/oscilloscope\";\r\nimport { SpectralAnalyserNode, Bang, isBang } from \"../sdk\";\r\nimport type { OscilloscopeUIState } from \"../ui/oscilloscope\";\r\nimport type { TWindowFunction } from \"@jspatcher/jspatcher/src/core/worklets/SpectralAnalyserWorklet.types\";\r\nimport type { IInletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\n\r\nexport interface IS {\r\n    node: SpectralAnalyserNode;\r\n}\r\nexport interface P extends Omit<OscilloscopeUIState, \"$cursor\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\r\n    windowSize: number;\r\n    fftSize: number;\r\n    fftOverlap: number;\r\n    windowFunction: TWindowFunction;\r\n}\r\nexport default class Oscilloscope extends BaseAnalyserObject<{}, {}, [Bang], [], [], P, OscilloscopeUIState> {\r\n    static description = \"Oscilloscope\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"signal\",\r\n        description: \"Signal\"\r\n    }];\r\n    static props: IPropsMeta<P> = {\r\n        windowSize: {\r\n            type: \"number\",\r\n            default: 1024,\r\n            description: \"Signal window size\"\r\n        },\r\n        fftSize: {\r\n            type: \"number\",\r\n            default: 1024,\r\n            description: \"FFT Size for analysis\"\r\n        },\r\n        fftOverlap: {\r\n            type: \"number\",\r\n            default: 2,\r\n            description: \"FFT overlap count (integer)\"\r\n        },\r\n        windowFunction: {\r\n            type: \"enum\",\r\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\r\n            default: \"blackman\",\r\n            description: \"Window Function aoolied for FFT analysis window\"\r\n        },\r\n        continuous: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Continuous drawing\",\r\n            isUIState: true\r\n        },\r\n        frameRate: {\r\n            type: \"number\",\r\n            default: 60,\r\n            description: \"UI refresh rate\",\r\n            isUIState: true\r\n        },\r\n        interleaved: {\r\n            type: \"boolean\",\r\n            default: false,\r\n            description: \"Draw channels seperately\",\r\n            isUIState: true\r\n        },\r\n        stablize: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Stablize\",\r\n            isUIState: true\r\n        },\r\n        range: {\r\n            type: \"number\",\r\n            default: 1,\r\n            description: \"Vertical range\",\r\n            isUIState: true\r\n        },\r\n        autoRange: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Auto adjust range if > 1\",\r\n            isUIState: true\r\n        },\r\n        showStats: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Show stats texts\",\r\n            isUIState: true\r\n        },\r\n        bgColor: {\r\n            type: \"color\",\r\n            default: \"rgb(40, 40, 40)\",\r\n            description: \"Background color\",\r\n            isUIState: true\r\n        },\r\n        phosphorColor: {\r\n            type: \"color\",\r\n            default: \"hsl(0, 100%, 85%)\",\r\n            description: \"Phosphor color\",\r\n            isUIState: true\r\n        },\r\n        hueOffset: {\r\n            type: \"number\",\r\n            default: 60,\r\n            description: \"Channel Color Hue offset\",\r\n            isUIState: true\r\n        },\r\n        textColor: {\r\n            type: \"color\",\r\n            default: \"#DDDD99\",\r\n            description: \"Info text color\",\r\n            isUIState: true\r\n        },\r\n        gridColor: {\r\n            type: \"color\",\r\n            default: \"#404040\",\r\n            description: \"Grid color\",\r\n            isUIState: true\r\n        },\r\n        seperatorColor: {\r\n            type: \"color\",\r\n            default: \"white\",\r\n            description: \"Channel seperator color\",\r\n            isUIState: true\r\n        }\r\n    };\r\n    static UI = OscilloscopeUI;\r\n    _: IS = { node: undefined };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 0;\r\n        });\r\n        this.on(\"updateProps\", (props) => {\r\n            if (this._.node) {\r\n                const { parameters } = this._.node;\r\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\r\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\r\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\r\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\r\n            }\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\r\n            this._.node = new SpectralAnalyserNode(this.audioCtx);\r\n            const { parameters } = this._.node;\r\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\r\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\r\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\r\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\r\n            this.disconnectAudioInlet();\r\n            this.inletAudioConnections[0] = { node: this._.node, index: 0 };\r\n            this.connectAudioInlet();\r\n        });\r\n        this.on(\"inlet\", ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (isBang(data)) this.updateUI({ paint: {} });\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            if (this._.node) this._.node.destroy();\r\n        });\r\n    }\r\n}\r\n","import DefaultAnalyserObject from \"./default\";\nimport { SpectralAnalyserNode, Bang, isBang } from \"../sdk\";\nimport type { SpectralAnalysis, TWindowFunction } from \"@jspatcher/jspatcher/src/core/worklets/SpectralAnalyserWorklet.types\";\nimport type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport interface P extends Record<keyof SpectralAnalysis, boolean> {\n    speedLim: number;\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n    continuous: boolean;\n}\nexport interface IS {\n    node: SpectralAnalyserNode;\n    $requestTimer: number;\n}\ntype Outlet0 = Partial<SpectralAnalysis>;\nexport default class SpectralAnalyser extends DefaultAnalyserObject<{}, {}, [Bang], [Outlet0], [], P> {\n    static description = \"Spectral feature extractor\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal, bang to extract features\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"object\",\n        description: \"Features chosen as object\"\n    }];\n    static props: IPropsMeta<P> = {\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"If continuous, value output speed limit in ms\"\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Buffer window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: false,\n            description: \"Whether output is continuous\"\n        },\n        buffer: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the signal buffer\"\n        },\n        lastAmplitudes: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the last amplitudes frame\"\n        },\n        allAmplitudes: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting all the amplitudes frame\"\n        },\n        amplitude: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the sum of the last amplitude frame\"\n        },\n        estimatedFreq: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the estimated frequency\"\n        },\n        centroid: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral centroid\"\n        },\n        flatness: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral flatness\"\n        },\n        flux: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral flux\"\n        },\n        kurtosis: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral kurtosis\"\n        },\n        skewness: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral skewness\"\n        },\n        rolloff: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral rolloff\"\n        },\n        slope: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral slope\"\n        },\n        spread: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral spread\"\n        }\n    };\n    _: IS = { node: undefined, $requestTimer: -1 };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            const request = async () => {\n                if (this._.node && !this._.node.destroyed) {\n                    const extractorKeys = [\n                        \"buffer\",\n                        \"lastAmplitudes\",\n                        \"allAmplitudes\",\n                        \"amplitude\",\n                        \"estimatedFreq\",\n                        \"centroid\",\n                        \"flatness\",\n                        \"flux\",\n                        \"kurtosis\",\n                        \"skewness\",\n                        \"rolloff\",\n                        \"slope\",\n                        \"spread\"\n                    ] as (keyof SpectralAnalysis)[];\n                    const gets: (keyof SpectralAnalysis)[] = [];\n                    extractorKeys.forEach((key) => {\n                        if (this.getProp(key)) gets.push(key);\n                    });\n                    const got = await this._.node.gets(...gets);\n                    this.outlet(0, got);\n                }\n                if (this.getProp(\"continuous\")) scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this._.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this._.node) {\n                const { parameters } = this._.node;\n                if (props.continuous) startRequest();\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this._.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this._.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this._.node, index: 0 };\n            this.connectAudioInlet();\n            if (this.getProp(\"continuous\")) startRequest();\n            this.on(\"inlet\", (e) => {\n                if (e.inlet === 0) {\n                    if (isBang(e.data)) startRequest();\n                }\n            });\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this._.$requestTimer);\n            if (this._.node) this._.node.destroy();\n        });\n    }\n}\n","import BaseAnalyserObject from \"./base\";\r\nimport SpectrogramUI from \"../ui/spectrogram\";\r\nimport { SpectralAnalyserNode, Bang, isBang } from \"../sdk\";\r\nimport type { SpectrogramUIState } from \"../ui/spectrogram\";\r\nimport type { TWindowFunction } from \"@jspatcher/jspatcher/src/core/worklets/SpectralAnalyserWorklet.types\";\r\nimport type { IInletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\n\r\nexport interface IS {\r\n    node: SpectralAnalyserNode;\r\n}\r\nexport interface P extends Omit<SpectrogramUIState, \"cursorX\" | \"cursorY\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\r\n    windowSize: number;\r\n    fftSize: number;\r\n    fftOverlap: number;\r\n    windowFunction: TWindowFunction;\r\n}\r\nexport default class Spectrogram extends BaseAnalyserObject<{}, {}, [Bang], [], [], P, SpectrogramUIState> {\r\n    static description = \"Spectroscope\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"signal\",\r\n        description: \"Signal\"\r\n    }];\r\n    static props: IPropsMeta<P> = {\r\n        windowSize: {\r\n            type: \"number\",\r\n            default: 65536,\r\n            description: \"Signal window size\"\r\n        },\r\n        fftSize: {\r\n            type: \"number\",\r\n            default: 1024,\r\n            description: \"FFT Size for analysis\"\r\n        },\r\n        fftOverlap: {\r\n            type: \"number\",\r\n            default: 2,\r\n            description: \"FFT overlap count (integer)\"\r\n        },\r\n        windowFunction: {\r\n            type: \"enum\",\r\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\r\n            default: \"blackman\",\r\n            description: \"Window Function aoolied for FFT analysis window\"\r\n        },\r\n        continuous: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Continuous drawing\",\r\n            isUIState: true\r\n        },\r\n        frameRate: {\r\n            type: \"number\",\r\n            default: 60,\r\n            description: \"UI refresh rate\",\r\n            isUIState: true\r\n        },\r\n        bgColor: {\r\n            type: \"color\",\r\n            default: \"rgb(40, 40, 40)\",\r\n            description: \"Background color\",\r\n            isUIState: true\r\n        },\r\n        gridColor: {\r\n            type: \"color\",\r\n            default: \"#404040\",\r\n            description: \"Grid color\",\r\n            isUIState: true\r\n        },\r\n        seperatorColor: {\r\n            type: \"color\",\r\n            default: \"white\",\r\n            description: \"Channel seperator color\",\r\n            isUIState: true\r\n        }\r\n    };\r\n    static UI = SpectrogramUI;\r\n    _: IS = { node: undefined };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 0;\r\n        });\r\n        this.on(\"updateProps\", (props) => {\r\n            if (this._.node) {\r\n                const { parameters } = this._.node;\r\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\r\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\r\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\r\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\r\n            }\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\r\n            this._.node = new SpectralAnalyserNode(this.audioCtx);\r\n            const { parameters } = this._.node;\r\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\r\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\r\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\r\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\r\n            this.disconnectAudioInlet();\r\n            this.inletAudioConnections[0] = { node: this._.node, index: 0 };\r\n            this.connectAudioInlet();\r\n        });\r\n        this.on(\"inlet\", ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (isBang(data)) this.updateUI({ paint: {} });\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            if (this._.node) this._.node.destroy();\r\n        });\r\n    }\r\n}\r\n","import BaseAnalyserObject from \"./base\";\r\nimport SpectroscopeUI from \"../ui/spectroscope\";\r\nimport { SpectralAnalyserNode, Bang, isBang } from \"../sdk\";\r\nimport type { SpectroscopeUIState } from \"../ui/spectroscope\";\r\nimport type { TWindowFunction } from \"@jspatcher/jspatcher/src/core/worklets/SpectralAnalyserWorklet.types\";\r\nimport type { IInletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\n\r\nexport interface IS {\r\n    node: SpectralAnalyserNode;\r\n}\r\nexport interface Props extends Omit<SpectroscopeUIState, \"$cursor\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\r\n    windowSize: number;\r\n    fftSize: number;\r\n    fftOverlap: number;\r\n    windowFunction: TWindowFunction;\r\n}\r\nexport default class Spectroscope extends BaseAnalyserObject<{}, {}, [Bang], [], [], Props, SpectroscopeUIState> {\r\n    static description = \"Spectroscope\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"signal\",\r\n        description: \"Signal\"\r\n    }];\r\n    static props: IPropsMeta<Props> = {\r\n        windowSize: {\r\n            type: \"number\",\r\n            default: 1024,\r\n            description: \"Signal window size\"\r\n        },\r\n        fftSize: {\r\n            type: \"number\",\r\n            default: 1024,\r\n            description: \"FFT Size for analysis\"\r\n        },\r\n        fftOverlap: {\r\n            type: \"number\",\r\n            default: 2,\r\n            description: \"FFT overlap count (integer)\"\r\n        },\r\n        windowFunction: {\r\n            type: \"enum\",\r\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\r\n            default: \"blackman\",\r\n            description: \"Window Function aoolied for FFT analysis window\"\r\n        },\r\n        continuous: {\r\n            type: \"boolean\",\r\n            default: true,\r\n            description: \"Continuous drawing\",\r\n            isUIState: true\r\n        },\r\n        frameRate: {\r\n            type: \"number\",\r\n            default: 60,\r\n            description: \"UI refresh rate\",\r\n            isUIState: true\r\n        },\r\n        bgColor: {\r\n            type: \"color\",\r\n            default: \"rgb(40, 40, 40)\",\r\n            description: \"Background color\",\r\n            isUIState: true\r\n        },\r\n        fgColor: {\r\n            type: \"color\",\r\n            default: \"hsl(0, 100%, 85%)\",\r\n            description: \"Foreground color\",\r\n            isUIState: true\r\n        },\r\n        hueOffset: {\r\n            type: \"number\",\r\n            default: 60,\r\n            description: \"Channel Color Hue offset\",\r\n            isUIState: true\r\n        },\r\n        gridColor: {\r\n            type: \"color\",\r\n            default: \"#404040\",\r\n            description: \"Grid color\",\r\n            isUIState: true\r\n        },\r\n        seperatorColor: {\r\n            type: \"color\",\r\n            default: \"white\",\r\n            description: \"Channel seperator color\",\r\n            isUIState: true\r\n        }\r\n    };\r\n    static UI = SpectroscopeUI;\r\n    _: IS = { node: undefined };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 0;\r\n        });\r\n        this.on(\"updateProps\", (props) => {\r\n            if (this._.node) {\r\n                const { parameters } = this._.node;\r\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\r\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\r\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\r\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\r\n            }\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\r\n            this._.node = new SpectralAnalyserNode(this.audioCtx);\r\n            const { parameters } = this._.node;\r\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\r\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\r\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\r\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\r\n            this.disconnectAudioInlet();\r\n            this.inletAudioConnections[0] = { node: this._.node, index: 0 };\r\n            this.connectAudioInlet();\r\n        });\r\n        this.on(\"inlet\", ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (isBang(data)) this.updateUI({ paint: {} });\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            if (this._.node) this._.node.destroy();\r\n        });\r\n    }\r\n}\r\n","import DefaultAnalyserObject from \"./default\";\nimport { TemporalAnalyserNode, Bang, isBang } from \"../sdk\";\nimport type { TemporalAnalysis } from \"@jspatcher/jspatcher/src/core/worklets/TemporalAnalyserWorklet.types\";\nimport type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport interface P extends Record<keyof TemporalAnalysis, boolean> {\n    speedLim: number;\n    windowSize: number;\n    continuous: boolean;\n}\nexport interface IS {\n    node: TemporalAnalyserNode;\n    $requestTimer: number;\n}\ntype Outlet0 = Partial<TemporalAnalysis>;\nexport default class TemporalAnalyser extends DefaultAnalyserObject<{}, IS, [Bang], [Outlet0], [], P> {\n    static description = \"Temporal feature extractor\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal, bang to extract features\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"object\",\n        description: \"Features chosen as object\"\n    }];\n    static props: IPropsMeta<P> = {\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"If continuous, value output speed limit in ms\"\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Buffer window size\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: false,\n            description: \"Whether output is continuous\"\n        },\n        buffer: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the signal buffer\"\n        },\n        absMax: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the absolute Maximum\"\n        },\n        rms: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the Root Mean Square\"\n        },\n        zcr: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the zero crossing count\"\n        }\n    };\n    _: IS = { node: undefined, $requestTimer: -1 };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            const request = async () => {\n                if (this._.node && !this._.node.destroyed) {\n                    const extractorKeys = [\n                        \"buffer\",\n                        \"rms\",\n                        \"zcr\",\n                        \"absMax\"\n                    ] as (keyof TemporalAnalysis)[];\n                    const gets: (keyof TemporalAnalysis)[] = [];\n                    extractorKeys.forEach((key) => {\n                        if (this.getProp(key)) gets.push(key);\n                    });\n                    const got = await this._.node.gets(...gets);\n                    this.outlet(0, got);\n                }\n                if (this.getProp(\"continuous\")) scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this._.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this._.node) {\n                const { parameters } = this._.node;\n                if (props.continuous) startRequest();\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await TemporalAnalyserNode.register(this.audioCtx.audioWorklet);\n            this._.node = new TemporalAnalyserNode(this.audioCtx);\n            const { parameters } = this._.node;\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this._.node, index: 0 };\n            this.connectAudioInlet();\n            if (this.getProp(\"continuous\")) startRequest();\n            this.on(\"inlet\", (e) => {\n                if (e.inlet === 0) {\n                    if (isBang(e.data)) startRequest();\n                }\n            });\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this._.$requestTimer);\n            if (this._.node) this._.node.destroy();\n        });\n    }\n}\n","import * as JSON from \"../package.json\";\n\nexport default JSON;\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    PatcherAudio,\r\n    OperableAudioBuffer,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    DefaultObject,\r\n    BaseUI,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    DefaultPopupUI,\r\n    CodePopupUI,\r\n    DOMUI,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    generateRemotedObject,\r\n    Bang,\r\n    isBang,\r\n    TransmitterNode,\r\n    TemporalAnalyserNode,\r\n    SpectralAnalyserNode,\r\n    MathUtils,\r\n    BufferUtils,\r\n    Utils\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface PatcherAudio extends InstanceType<typeof PatcherAudio> {}\r\nexport interface OperableAudioBuffer extends InstanceType<typeof OperableAudioBuffer> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface TransmitterNode extends InstanceType<typeof TransmitterNode> {}\r\nexport interface TemporalAnalyserNode extends InstanceType<typeof TemporalAnalyserNode> {}\r\nexport interface SpectralAnalyserNode extends InstanceType<typeof SpectralAnalyserNode> {}\r\n","import * as Color from \"color-js\";\r\nimport { CanvasUI } from \"../sdk\";\r\nimport type Oscilloscope from \"../objects/oscilloscope\";\r\n\r\nexport interface OscilloscopeUIState {\r\n    continuous: boolean;\r\n    frameRate: number;\r\n    interleaved: boolean;\r\n    stablize: boolean;\r\n    $cursor: number;\r\n    zoom: number;\r\n    zoomOffset: number;\r\n    range: number;\r\n    autoRange: boolean;\r\n    showStats: boolean;\r\n    bgColor: string;\r\n    phosphorColor: string;\r\n    hueOffset: number;\r\n    textColor: string;\r\n    gridColor: string;\r\n    seperatorColor: string;\r\n    paint: {};\r\n}\r\nexport default class OscilloscopeUI extends CanvasUI<Oscilloscope, {}, OscilloscopeUIState> {\r\n    static defaultSize = [120, 60] as [number, number];\r\n    componentDidMount() {\r\n        const { bgColor } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n        const [width, height] = this.fullSize();\r\n        // Background\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n        super.componentDidMount();\r\n    }\r\n    async paint() {\r\n        if (this.state.continuous) this.schedulePaint();\r\n        if (!this.object._.node) return;\r\n        if (this.object._.node.destroyed) return;\r\n        const {\r\n            // width,\r\n            // height,\r\n            // zoom,\r\n            // zoomOffset,\r\n            stablize,\r\n            interleaved,\r\n            // $cursor,\r\n            range,\r\n            autoRange,\r\n            showStats,\r\n            bgColor,\r\n            phosphorColor,\r\n            hueOffset,\r\n            textColor,\r\n            gridColor,\r\n            seperatorColor\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n\r\n        const left = 0;\r\n        const bottom = 0;\r\n\r\n        const { estimatedFreq, buffer } = await this.object._.node.gets(\"estimatedFreq\", \"buffer\");\r\n        const l = this.object.getProp(\"windowSize\");\r\n        const { sampleRate } = this.object.audioCtx;\r\n\r\n        // Background\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n\r\n        if (!buffer) return;\r\n\r\n        const { $read: $ui32, data: t } = buffer;\r\n        if (!t || !t.length || !t[0].length) return;\r\n\r\n        const $ = Atomics.load($ui32, 0);\r\n        const channels = t.length;\r\n        const dl = t[0].length;\r\n        // Vertical Range\r\n        let yMin = -range;\r\n        let yMax = range;\r\n        let yFactor = range;\r\n        if (autoRange) {\r\n            // Fastest way to get min and max to have: 1. max abs value for y scaling, 2. mean value for zero-crossing\r\n            let i = channels;\r\n            let s = 0;\r\n            while (i--) {\r\n                let j = l;\r\n                while (j--) {\r\n                    s = t[i][($ + j) % dl];\r\n                    if (s < yMin) yMin = s;\r\n                    else if (s > yMax) yMax = s;\r\n                }\r\n            }\r\n            yFactor = Math.max(1, Math.abs(yMin), Math.abs(yMax))/* * vzoom*/;\r\n        }\r\n        const calcY = (v: number, i: number) => channelHeight * (+interleaved * i + 1 - (v - yMin) / (yMax - yMin));\r\n        // Grids\r\n        ctx.strokeStyle = gridColor;\r\n        let vStep = 0.25;\r\n        while (yFactor / 2 / vStep > 2) vStep *= 2; // Minimum horizontal grids in channel one side = 2\r\n        ctx.beginPath();\r\n        ctx.setLineDash([]);\r\n        const gridChannels = interleaved ? channels : 1;\r\n        const channelHeight = (height - bottom) / gridChannels;\r\n        for (let i = 0; i < gridChannels; i++) {\r\n            let y = calcY(0, i);\r\n            ctx.moveTo(left, y);\r\n            ctx.lineTo(width, y); // 0-line\r\n            for (let j = vStep; j < yFactor; j += vStep) {\r\n                y = calcY(j, i);\r\n                ctx.moveTo(left, y);\r\n                ctx.lineTo(width, y); // below 0\r\n                y = calcY(-j, i);\r\n                ctx.moveTo(left, y);\r\n                ctx.lineTo(width, y); // above 0\r\n            }\r\n        }\r\n        ctx.stroke();\r\n\r\n        ctx.beginPath();\r\n        ctx.setLineDash([4, 2]);\r\n        ctx.strokeStyle = seperatorColor;\r\n        for (let i = 1; i < gridChannels; i++) {\r\n            ctx.moveTo(left, i * channelHeight);\r\n            ctx.lineTo(width, i * channelHeight);\r\n        }\r\n        ctx.stroke();\r\n        ctx.setLineDash([]);\r\n        ctx.lineWidth = 2;\r\n        const channelColor: string[] = [];\r\n        let $zerox = 0; // First Zero-crossing of first channel\r\n        const period = sampleRate / estimatedFreq[0];\r\n        const times = Math.floor(l / period) - 1;\r\n        for (let i = 0; i < channels; i++) {\r\n            // Horizontal Range\r\n            let $0 = 0; // Draw start\r\n            let $1 = l; // Draw End\r\n            let drawL = l; // Length to draw\r\n            if (stablize) { // Stablization\r\n                if (i === 0) {\r\n                    const thresh = (yMin + yMax) * 0.5 + 0.001; // the zero-crossing with \"offset\"\r\n                    while ($zerox < l && t[i][($ + $zerox++) % dl] > thresh); // Find first raise\r\n                    if ($zerox >= l - 1) { // Found nothing, no stablization\r\n                        $zerox = 0;\r\n                    } else {\r\n                        while ($zerox < l && t[i][($ + $zerox++) % dl] < thresh); // Find first drop\r\n                        $zerox--;\r\n                        if ($zerox >= l - 1 || $zerox < 0) {\r\n                            $zerox = 0;\r\n                        }\r\n                    }\r\n                }\r\n                drawL = times > 0 && isFinite(period) ? ~~Math.min(period * times, l - $zerox) : l - $zerox; // length to draw\r\n            }\r\n            $0 = Math.round($zerox/* + drawL * zoomOffset*/);\r\n            $1 = Math.round($zerox + drawL/* / zoom + drawL * zoomOffset*/);\r\n            const pixelsPerSamp = (width - left) / ($1 - 1 - $0);\r\n            const sampsPerPixel = Math.max(1, Math.round(1 / pixelsPerSamp));\r\n\r\n            if (interleaved) {\r\n                ctx.save();\r\n                const clip = new Path2D();\r\n                clip.rect(0, i * channelHeight, width, channelHeight);\r\n                ctx.clip(clip);\r\n            }\r\n            ctx.beginPath();\r\n            channelColor[i] = Color(phosphorColor).shiftHue(i * hueOffset).toHSL();\r\n            ctx.strokeStyle = channelColor[i];\r\n            let maxInStep;\r\n            let minInStep;\r\n            for (let j = $0; j < $1; j++) {\r\n                const $j = (j + $) % dl;\r\n                const samp = t[i][$j];\r\n                const $step = (j - $0) % sampsPerPixel;\r\n                if ($step === 0) {\r\n                    maxInStep = samp;\r\n                    minInStep = samp;\r\n                }\r\n                if ($step !== sampsPerPixel - 1) {\r\n                    if ($step !== 0) {\r\n                        if (samp > maxInStep) maxInStep = samp;\r\n                        if (samp < minInStep) minInStep = samp;\r\n                    }\r\n                    continue;\r\n                }\r\n                const x = (j - $step - $0) * pixelsPerSamp;\r\n                let y = calcY(maxInStep, i);\r\n                if (j === $0) ctx.moveTo(x, y);\r\n                else ctx.lineTo(x, y);\r\n                if (minInStep !== maxInStep) {\r\n                    y = calcY(minInStep, i);\r\n                    ctx.lineTo(x, y);\r\n                }\r\n            }\r\n            ctx.stroke();\r\n            if (interleaved) ctx.restore();\r\n        }\r\n        // Stats\r\n        if (showStats) {\r\n            ctx.font = \"bold 12px Consolas, monospace\";\r\n            ctx.fillStyle = textColor;\r\n            ctx.textAlign = \"left\";\r\n            ctx.textBaseline = \"top\";\r\n            ctx.fillText(yFactor.toFixed(2), 2, 2);\r\n            ctx.textBaseline = \"bottom\";\r\n            ctx.fillText((-yFactor).toFixed(2), 2, height - 2);\r\n            ctx.textAlign = \"right\";\r\n            const freqStatY = height - 2 - (estimatedFreq.length - 1) * 14;\r\n            for (let i = 0; i < estimatedFreq.length; i++) {\r\n                const freq = estimatedFreq[i];\r\n                ctx.fillStyle = channelColor[i];\r\n                const y = interleaved ? channelHeight * (i + 1) - 2 : freqStatY + 14 * i;\r\n                ctx.fillText(freq.toFixed(2) + \"Hz\", width - 2, y);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { CanvasUI, MathUtils } from \"../sdk\";\r\nimport Spectrogram from \"../objects/spectrogram\";\r\n\r\nexport interface SpectrogramUIState {\r\n    continuous: boolean;\r\n    frameRate: number;\r\n    cursorX: number;\r\n    cursorY: number;\r\n    zoom: number;\r\n    zoomOffset: number;\r\n    bgColor: string;\r\n    // textColor: string;\r\n    gridColor: string;\r\n    seperatorColor: string;\r\n    paint: {};\r\n}\r\nexport default class SpectrogramUI extends CanvasUI<Spectrogram, {}, SpectrogramUIState> {\r\n    static defaultSize = [120, 60] as [number, number];\r\n    $lastFrame = -1;\r\n    dataFrames = 1;\r\n    offscreenCtx = document.createElement(\"canvas\").getContext(\"2d\");\r\n    offscreenVRes = 1024;\r\n    componentDidMount() {\r\n        const { bgColor } = this.state;\r\n        const { ctx, offscreenCtx, dataFrames } = this;\r\n        if (!ctx) return;\r\n        const [width, height] = this.fullSize();\r\n        offscreenCtx.canvas.width = dataFrames;\r\n        offscreenCtx.canvas.height = this.offscreenVRes;\r\n        // Background\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n        super.componentDidMount();\r\n    }\r\n    async paint() {\r\n        if (this.state.continuous) this.schedulePaint();\r\n        if (!this.object._.node) return;\r\n        if (this.object._.node.destroyed) return;\r\n        const {\r\n            // width,\r\n            // height,\r\n            // zoom,\r\n            // zoomOffset,\r\n            // $cursor,\r\n            bgColor,\r\n            gridColor,\r\n            seperatorColor\r\n        } = this.state;\r\n        const { ctx, offscreenCtx, offscreenVRes } = this;\r\n        if (!ctx || !offscreenCtx) return;\r\n\r\n        const left = 0;\r\n        const bottom = 0;\r\n\r\n        const allAmplitudes = await this.object._.node.getAllAmplitudes();\r\n\r\n        // Background\r\n\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n\r\n        if (!allAmplitudes) return;\r\n        const { data: f, $totalFrames, fftBins: bins, frames, dataFrames, $writeFrame: $writeFrameUi32 } = allAmplitudes;\r\n        if (!f || !f.length || !f[0].length) return;\r\n        const l = f[0].length;\r\n        const channels = f.length;\r\n\r\n        // Draw to offscreen canvas\r\n        const $lastFrame = Atomics.load($totalFrames, 0) - 1;\r\n        const $writeFrame = Atomics.load($writeFrameUi32, 0);\r\n        let $frame0 = $writeFrame;\r\n        let $frame1 = $frame0 + dataFrames;\r\n        if (this.dataFrames !== dataFrames) {\r\n            offscreenCtx.canvas.width = dataFrames;\r\n            this.dataFrames = dataFrames;\r\n        } else if ($lastFrame >= this.$lastFrame) {\r\n            $frame0 = Math.max($frame0, $frame1 - ($lastFrame - this.$lastFrame));\r\n        }\r\n        this.$lastFrame = $lastFrame;\r\n        const osChannelHeight = offscreenVRes / channels;\r\n        const step = Math.max(1, Math.round(bins / osChannelHeight));\r\n        const vGrid = osChannelHeight / bins;\r\n        for (let i = 0; i < f.length; i++) {\r\n            for (let j = $frame0; j < $frame1; j++) {\r\n                let maxInStep;\r\n                offscreenCtx.fillStyle = \"black\";\r\n                offscreenCtx.fillRect(j % dataFrames, i * osChannelHeight, 1, osChannelHeight);\r\n                for (let k = 0; k < bins; k++) {\r\n                    const samp = MathUtils.atodb(f[i][(k + j * bins) % l]);\r\n                    const $step = k % step;\r\n                    if ($step === 0) maxInStep = samp;\r\n                    if ($step !== step - 1) {\r\n                        if ($step !== 0 && samp > maxInStep) maxInStep = samp;\r\n                        continue;\r\n                    }\r\n                    const normalized = Math.min(1, Math.max(0, (maxInStep + 10) / 100 + 1));\r\n                    if (normalized === 0) continue;\r\n                    const hue = (normalized * 180 + 240) % 360;\r\n                    const lum = normalized * 50;\r\n                    offscreenCtx.fillStyle = `hsl(${hue}, 100%, ${lum}%)`;\r\n                    offscreenCtx.fillRect(j % dataFrames, (bins - k - 1) * vGrid + i * osChannelHeight, 1, Math.max(1, vGrid));\r\n                }\r\n            }\r\n        }\r\n        // Grids\r\n        ctx.strokeStyle = gridColor;\r\n        const vStep = 0.25;\r\n        const hStep = 0.25;\r\n        ctx.beginPath();\r\n        ctx.setLineDash([]);\r\n        const gridChannels = channels;\r\n        const channelHeight = (height - bottom) / gridChannels;\r\n        for (let i = 0; i < gridChannels; i++) {\r\n            for (let j = vStep; j < 1; j += vStep) { // Horizontal lines\r\n                const y = (i + j) * channelHeight;\r\n                ctx.moveTo(left, y);\r\n                ctx.lineTo(width, y);\r\n            }\r\n        }\r\n        for (let i = hStep; i < 1; i += hStep) {\r\n            const x = left + (width - left) * i;\r\n            ctx.moveTo(x, 0);\r\n            ctx.lineTo(x, bottom);\r\n        }\r\n        ctx.stroke();\r\n\r\n        ctx.beginPath();\r\n        ctx.setLineDash([4, 2]);\r\n        ctx.strokeStyle = seperatorColor;\r\n        for (let i = 1; i < gridChannels; i++) {\r\n            ctx.moveTo(left, i * channelHeight);\r\n            ctx.lineTo(width, i * channelHeight);\r\n        }\r\n        ctx.stroke();\r\n        ctx.setLineDash([]);\r\n        // Horizontal Range\r\n        ctx.save();\r\n        ctx.globalCompositeOperation = \"lighter\";\r\n        ctx.imageSmoothingEnabled = false;\r\n        $frame0 = ($frame1 - frames) % dataFrames;\r\n        $frame1 = $frame0 + frames;\r\n        if ($frame1 <= dataFrames) {\r\n            ctx.drawImage(offscreenCtx.canvas, $frame0, 0, frames, offscreenVRes, left, 0, width - left, height - bottom);\r\n        } else {\r\n            const sSplit = dataFrames - $frame0;\r\n            const dSplit = sSplit / frames * (width - left);\r\n            ctx.drawImage(offscreenCtx.canvas, $frame0, 0, sSplit, offscreenVRes, left, 0, dSplit, height - bottom);\r\n            ctx.drawImage(offscreenCtx.canvas, 0, 0, $frame1 - dataFrames - 0.01, offscreenVRes, dSplit + left, 0, width - left - dSplit, height - bottom);\r\n        }\r\n        ctx.restore();\r\n    }\r\n}","import * as Color from \"color-js\";\r\nimport Spectroscope from \"../objects/spectroscope\";\r\nimport { CanvasUI, MathUtils } from \"../sdk\";\r\n\r\nexport interface SpectroscopeUIState {\r\n    continuous: boolean;\r\n    frameRate: number;\r\n    $cursor: number;\r\n    zoom: number;\r\n    zoomOffset: number;\r\n    bgColor: string;\r\n    fgColor: string;\r\n    hueOffset: number;\r\n    gridColor: string;\r\n    seperatorColor: string;\r\n    paint: {};\r\n}\r\nexport default class SpectroscopeUI extends CanvasUI<Spectroscope, {}, SpectroscopeUIState> {\r\n    static defaultSize = [120, 60] as [number, number];\r\n    componentDidMount() {\r\n        const { bgColor } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n        const [width, height] = this.fullSize();\r\n        // Background\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n        super.componentDidMount();\r\n    }\r\n    async paint() {\r\n        if (this.state.continuous) this.schedulePaint();\r\n        if (!this.object._.node) return;\r\n        if (this.object._.node.destroyed) return;\r\n        const {\r\n            // width,\r\n            // height,\r\n            // zoom,\r\n            // zoomOffset,\r\n            // $cursor,\r\n            bgColor,\r\n            fgColor,\r\n            hueOffset,\r\n            gridColor,\r\n            seperatorColor\r\n        } = this.state;\r\n        const ctx = this.ctx;\r\n        if (!ctx) return;\r\n\r\n        const left = 0;\r\n        const bottom = 0;\r\n\r\n        const lastAmplitudes = await this.object._.node.getLastAmplitudes();\r\n\r\n        // Background\r\n        const [width, height] = this.fullSize();\r\n        ctx.clearRect(0, 0, width, height);\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n\r\n        if (!lastAmplitudes) return;\r\n        const { data: f } = lastAmplitudes;\r\n        if (!f || !f.length || !f[0].length) return;\r\n        const l = f[0].length;\r\n        const channels = f.length;\r\n\r\n        // Grids\r\n        ctx.strokeStyle = gridColor;\r\n        const vStep = 0.25;\r\n        const hStep = 0.25;\r\n        ctx.beginPath();\r\n        ctx.setLineDash([]);\r\n        const gridChannels = channels;\r\n        const channelHeight = (height - bottom) / gridChannels;\r\n        for (let i = 0; i < gridChannels; i++) {\r\n            for (let j = vStep; j < 1; j += vStep) { // Horizontal lines\r\n                const y = (i + j) * channelHeight;\r\n                ctx.moveTo(left, y);\r\n                ctx.lineTo(width, y);\r\n            }\r\n        }\r\n        for (let i = hStep; i < 1; i += hStep) {\r\n            const x = left + (width - left) * i;\r\n            ctx.moveTo(x, 0);\r\n            ctx.lineTo(x, bottom);\r\n        }\r\n        ctx.stroke();\r\n\r\n        ctx.beginPath();\r\n        ctx.setLineDash([4, 2]);\r\n        ctx.strokeStyle = seperatorColor;\r\n        for (let i = 1; i < gridChannels; i++) {\r\n            ctx.moveTo(left, i * channelHeight);\r\n            ctx.lineTo(width, i * channelHeight);\r\n        }\r\n        ctx.stroke();\r\n        ctx.setLineDash([]);\r\n        ctx.lineWidth = 2;\r\n        const channelColor: string[] = [];\r\n        // Horizontal Range\r\n        const $0 = 0; // Draw start\r\n        const $1 = l; // Draw End\r\n        const gridX = (width - left) / ($1 - $0);\r\n        const step = Math.max(1, Math.round(1 / gridX));\r\n        for (let i = 0; i < f.length; i++) {\r\n            ctx.beginPath();\r\n            channelColor[i] = Color(fgColor).shiftHue(i * hueOffset).toHSL();\r\n            ctx.fillStyle = channelColor[i];\r\n            let maxInStep;\r\n            for (let j = $0; j < $1; j++) {\r\n                const samp = MathUtils.atodb(f[i][j]);\r\n                const $step = (j - $0) % step;\r\n                if ($step === 0) maxInStep = samp;\r\n                if ($step !== step - 1) {\r\n                    if ($step !== 0 && samp > maxInStep) maxInStep = samp;\r\n                    continue;\r\n                }\r\n                const x = (j - $0) * gridX + left;\r\n                const y = channelHeight * (i + 1 - Math.min(1, Math.max(0, maxInStep / 100 + 1)));\r\n                if (j === $0) ctx.moveTo(x, y);\r\n                else ctx.lineTo(x, y);\r\n            }\r\n            ctx.lineTo(width, channelHeight * (i + 1));\r\n            ctx.lineTo(left, channelHeight * (i + 1));\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) 2008-2013, Andrew Brehaut, Tim Baumann, Matt Wilson, \n//                          Simon Heimler, Michel Vielmetter \n//\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// * Redistributions of source code must retain the above copyright notice,\n//   this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright notice,\n//   this list of conditions and the following disclaimer in the documentation\n//   and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\n// color.js - version 1.0.1\n//\n// HSV <-> RGB code based on code from http://www.cs.rit.edu/~ncs/color/t_convert.html\n// object function created by Douglas Crockford.\n// Color scheme degrees taken from the colorjack.com colorpicker\n//\n// HSL support kindly provided by Tim Baumann - http://github.com/timjb\n\n// create namespaces\n/*global net */\nif (\"undefined\" == typeof net) {\n    var net = {};\n}\nif (!net.brehaut) {\n    net.brehaut = {};\n}\n\n// this module function is called with net.brehaut as 'this'\n(function() {\n    \"use strict\";\n    // Constants\n\n    // css_colors maps color names onto their hex values\n    // these names are defined by W3C\n    \n    var css_colors = {aliceblue:'#F0F8FF',antiquewhite:'#FAEBD7',aqua:'#00FFFF',aquamarine:'#7FFFD4',azure:'#F0FFFF',beige:'#F5F5DC',bisque:'#FFE4C4',black:'#000000',blanchedalmond:'#FFEBCD',blue:'#0000FF',blueviolet:'#8A2BE2',brown:'#A52A2A',burlywood:'#DEB887',cadetblue:'#5F9EA0',chartreuse:'#7FFF00',chocolate:'#D2691E',coral:'#FF7F50',cornflowerblue:'#6495ED',cornsilk:'#FFF8DC',crimson:'#DC143C',cyan:'#00FFFF',darkblue:'#00008B',darkcyan:'#008B8B',darkgoldenrod:'#B8860B',darkgray:'#A9A9A9',darkgrey:'#A9A9A9',darkgreen:'#006400',darkkhaki:'#BDB76B',darkmagenta:'#8B008B',darkolivegreen:'#556B2F',darkorange:'#FF8C00',darkorchid:'#9932CC',darkred:'#8B0000',darksalmon:'#E9967A',darkseagreen:'#8FBC8F',darkslateblue:'#483D8B',darkslategray:'#2F4F4F',darkslategrey:'#2F4F4F',darkturquoise:'#00CED1',darkviolet:'#9400D3',deeppink:'#FF1493',deepskyblue:'#00BFFF',dimgray:'#696969',dimgrey:'#696969',dodgerblue:'#1E90FF',firebrick:'#B22222',floralwhite:'#FFFAF0',forestgreen:'#228B22',fuchsia:'#FF00FF',gainsboro:'#DCDCDC',ghostwhite:'#F8F8FF',gold:'#FFD700',goldenrod:'#DAA520',gray:'#808080',grey:'#808080',green:'#008000',greenyellow:'#ADFF2F',honeydew:'#F0FFF0',hotpink:'#FF69B4',indianred:'#CD5C5C',indigo:'#4B0082',ivory:'#FFFFF0',khaki:'#F0E68C',lavender:'#E6E6FA',lavenderblush:'#FFF0F5',lawngreen:'#7CFC00',lemonchiffon:'#FFFACD',lightblue:'#ADD8E6',lightcoral:'#F08080',lightcyan:'#E0FFFF',lightgoldenrodyellow:'#FAFAD2',lightgray:'#D3D3D3',lightgrey:'#D3D3D3',lightgreen:'#90EE90',lightpink:'#FFB6C1',lightsalmon:'#FFA07A',lightseagreen:'#20B2AA',lightskyblue:'#87CEFA',lightslategray:'#778899',lightslategrey:'#778899',lightsteelblue:'#B0C4DE',lightyellow:'#FFFFE0',lime:'#00FF00',limegreen:'#32CD32',linen:'#FAF0E6',magenta:'#FF00FF',maroon:'#800000',mediumaquamarine:'#66CDAA',mediumblue:'#0000CD',mediumorchid:'#BA55D3',mediumpurple:'#9370D8',mediumseagreen:'#3CB371',mediumslateblue:'#7B68EE',mediumspringgreen:'#00FA9A',mediumturquoise:'#48D1CC',mediumvioletred:'#C71585',midnightblue:'#191970',mintcream:'#F5FFFA',mistyrose:'#FFE4E1',moccasin:'#FFE4B5',navajowhite:'#FFDEAD',navy:'#000080',oldlace:'#FDF5E6',olive:'#808000',olivedrab:'#6B8E23',orange:'#FFA500',orangered:'#FF4500',orchid:'#DA70D6',palegoldenrod:'#EEE8AA',palegreen:'#98FB98',paleturquoise:'#AFEEEE',palevioletred:'#D87093',papayawhip:'#FFEFD5',peachpuff:'#FFDAB9',peru:'#CD853F',pink:'#FFC0CB',plum:'#DDA0DD',powderblue:'#B0E0E6',purple:'#800080',rebeccapurple:'#663399',red:'#FF0000',rosybrown:'#BC8F8F',royalblue:'#4169E1',saddlebrown:'#8B4513',salmon:'#FA8072',sandybrown:'#F4A460',seagreen:'#2E8B57',seashell:'#FFF5EE',sienna:'#A0522D',silver:'#C0C0C0',skyblue:'#87CEEB',slateblue:'#6A5ACD',slategray:'#708090',slategrey:'#708090',snow:'#FFFAFA',springgreen:'#00FF7F',steelblue:'#4682B4',tan:'#D2B48C',teal:'#008080',thistle:'#D8BFD8',tomato:'#FF6347',turquoise:'#40E0D0',violet:'#EE82EE',wheat:'#F5DEB3',white:'#FFFFFF',whitesmoke:'#F5F5F5',yellow:'#FFFF00',yellowgreen:'#9ACD32'};\n\n\n    // CSS value regexes, according to http://www.w3.org/TR/css3-values/\n    var css_integer = '(?:\\\\+|-)?\\\\d+';\n    var css_float = '(?:\\\\+|-)?\\\\d*\\\\.\\\\d+';\n    var css_number = '(?:' + css_integer + ')|(?:' + css_float + ')';\n    css_integer = '(' + css_integer + ')';\n    css_float = '(' + css_float + ')';\n    css_number = '(' + css_number + ')';\n    var css_percentage = css_number + '%';\n    var css_whitespace = '\\\\s*?';\n\n    // http://www.w3.org/TR/2003/CR-css3-color-20030514/\n    var hsl_hsla_regex = new RegExp([\n        '^hsl(a?)\\\\(', css_number, ',', css_percentage, ',', css_percentage, '(,(', css_number, '))?\\\\)$'\n    ].join(css_whitespace));\n    var rgb_rgba_integer_regex = new RegExp([\n        '^rgb(a?)\\\\(', css_integer, ',', css_integer, ',', css_integer, '(,(', css_number, '))?\\\\)$'\n    ].join(css_whitespace));\n    var rgb_rgba_percentage_regex = new RegExp([\n        '^rgb(a?)\\\\(', css_percentage, ',', css_percentage, ',', css_percentage, '(,(', css_number, '))?\\\\)$'\n    ].join(css_whitespace));\n\n    // Package wide variables\n\n    // becomes the top level prototype object\n    var color;\n\n    /* registered_models contains the template objects for all the\n     * models that have been registered for the color class.\n     */\n    var registered_models = [];\n\n\n    /* factories contains methods to create new instance of\n     * different color models that have been registered.\n     */\n    var factories = {};\n\n    // Utility functions\n\n    /* object is Douglas Crockfords object function for prototypal\n     * inheritance.\n     */\n    if (!this.object) {\n        this.object = function(o) {\n            function F() {}\n            F.prototype = o;\n            return new F();\n        };\n    }\n    var object = this.object;\n\n    /* takes a value, converts to string if need be, then pads it\n     * to a minimum length.\n     */\n    function pad(val, len) {\n        val = val.toString();\n        var padded = [];\n\n        for (var i = 0, j = Math.max(len - val.length, 0); i < j; i++) {\n            padded.push('0');\n        }\n\n        padded.push(val);\n        return padded.join('');\n    }\n\n\n    /* takes a string and returns a new string with the first letter\n     * capitalised\n     */\n    function capitalise(s) {\n        return s.slice(0, 1).toUpperCase() + s.slice(1);\n    }\n\n    /* removes leading and trailing whitespace\n     */\n    function trim(str) {\n        return str.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /* used to apply a method to object non-destructively by\n     * cloning the object and then apply the method to that\n     * new object\n     */\n    function cloneOnApply(meth) {\n        return function() {\n            var cloned = this.clone();\n            meth.apply(cloned, arguments);\n            return cloned;\n        };\n    }\n\n\n    /* registerModel is used to add additional representations\n     * to the color code, and extend the color API with the new\n     * operation that model provides. see before for examples\n     */\n    function registerModel(name, model) {\n        var proto = object(color);\n        var fields = []; // used for cloning and generating accessors\n\n        var to_meth = 'to' + capitalise(name);\n\n        function convertAndApply(meth) {\n            return function() {\n                return meth.apply(this[to_meth](), arguments);\n            };\n        }\n\n        for (var key in model)\n            if (model.hasOwnProperty(key)) {\n                proto[key] = model[key];\n                var prop = proto[key];\n\n                if (key.slice(0, 1) == '_') {\n                    continue;\n                }\n                if (!(key in color) && \"function\" == typeof prop) {\n                    // the method found on this object is a) public and b) not\n                    // currently supported by the color object. Create an impl that\n                    // calls the toModel function and passes that new object\n                    // onto the correct method with the args.\n                    color[key] = convertAndApply(prop);\n                } else if (\"function\" != typeof prop) {\n                    // we have found a public property. create accessor methods\n                    // and bind them up correctly\n                    fields.push(key);\n                    var getter = 'get' + capitalise(key);\n                    var setter = 'set' + capitalise(key);\n\n                    color[getter] = convertAndApply(\n                        proto[getter] = (function(key) {\n                            return function() {\n                                return this[key];\n                            };\n                        })(key)\n                    );\n\n                    color[setter] = convertAndApply(\n                        proto[setter] = (function(key) {\n                            return function(val) {\n                                var cloned = this.clone();\n                                cloned[key] = val;\n                                return cloned;\n                            };\n                        })(key)\n                    );\n                }\n            } // end of for over model\n\n            // a method to create a new object - largely so prototype chains dont\n            // get insane. This uses an unrolled 'object' so that F is cached\n            // for later use. this is approx a 25% speed improvement\n\n        function F() {}\n        F.prototype = proto;\n\n        function factory() {\n            return new F();\n        }\n        factories[name] = factory;\n\n        proto.clone = function() {\n            var cloned = factory();\n            for (var i = 0, j = fields.length; i < j; i++) {\n                var key = fields[i];\n                cloned[key] = this[key];\n            }\n            return cloned;\n        };\n\n        color[to_meth] = function() {\n            return factory();\n        };\n\n        registered_models.push(proto);\n\n        return proto;\n    } // end of registerModel\n\n    // Template Objects\n\n    /* color is the root object in the color hierarchy. It starts\n     * life as a very simple object, but as color models are\n     * registered it has methods programmatically added to manage\n     * conversions as needed.\n     */\n    color = {\n        /* fromObject takes an argument and delegates to the internal\n         * color models to try to create a new instance.\n         */\n        fromObject: function(o) {\n            if (!o) {\n                return object(color);\n            }\n\n            for (var i = 0, j = registered_models.length; i < j; i++) {\n                var nu = registered_models[i].fromObject(o);\n                if (nu) {\n                    return nu;\n                }\n            }\n\n            return object(color);\n        },\n\n        toString: function() {\n            return this.toCSS();\n        }\n    };\n\n    var transparent = null; // defined with an RGB later.\n\n    /* RGB is the red green blue model. This definition is converted\n     * to a template object by registerModel.\n     */\n    registerModel('RGB', {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 0,\n\n        /* getLuminance returns a value between 0 and 1, this is the\n         * luminance calcuated according to\n         * http://www.poynton.com/notes/colour_and_gamma/ColorFAQ.html#RTFToC9\n         */\n        getLuminance: function() {\n            return (this.red * 0.2126) + (this.green * 0.7152) + (this.blue * 0.0722);\n        },\n\n        /* does an alpha based blend of color onto this. alpha is the\n         * amount of 'color' to use. (0 to 1)\n         */\n        blend: function(color, alpha) {\n            color = color.toRGB();\n            alpha = Math.min(Math.max(alpha, 0), 1);\n            var rgb = this.clone();\n\n            rgb.red = (rgb.red * (1 - alpha)) + (color.red * alpha);\n            rgb.green = (rgb.green * (1 - alpha)) + (color.green * alpha);\n            rgb.blue = (rgb.blue * (1 - alpha)) + (color.blue * alpha);\n            rgb.alpha = (rgb.alpha * (1 - alpha)) + (color.alpha * alpha);\n\n            return rgb;\n        },\n\n        /* fromObject attempts to convert an object o to and RGB\n         * instance. This accepts an object with red, green and blue\n         * members or a string. If the string is a known CSS color name\n         * or a hexdecimal string it will accept it.\n         */\n        fromObject: function(o) {\n            if (o instanceof Array) {\n                return this._fromRGBArray(o);\n            }\n            if (\"string\" == typeof o) {\n                return this._fromCSS(trim(o));\n            }\n            if (o.hasOwnProperty('red') &&\n                o.hasOwnProperty('green') &&\n                o.hasOwnProperty('blue')) {\n                return this._fromRGB(o);\n            }\n            // nothing matchs, not an RGB object\n        },\n\n        _stringParsers: [\n            // CSS RGB(A) literal:\n            function(css) {\n                css = trim(css);\n\n                var withInteger = match(rgb_rgba_integer_regex, 255);\n                if (withInteger) {\n                    return withInteger;\n                }\n                return match(rgb_rgba_percentage_regex, 100);\n\n                function match(regex, max_value) {\n                    var colorGroups = css.match(regex);\n\n                    // If there is an \"a\" after \"rgb\", there must be a fourth parameter and the other way round\n                    if (!colorGroups || (!!colorGroups[1] + !!colorGroups[5] === 1)) {\n                        return null;\n                    }\n\n                    var rgb = factories.RGB();\n                    rgb.red = Math.min(1, Math.max(0, colorGroups[2] / max_value));\n                    rgb.green = Math.min(1, Math.max(0, colorGroups[3] / max_value));\n                    rgb.blue = Math.min(1, Math.max(0, colorGroups[4] / max_value));\n                    rgb.alpha = !!colorGroups[5] ? Math.min(Math.max(parseFloat(colorGroups[6]), 0), 1) : 1;\n\n                    return rgb;\n                }\n            },\n\n            function(css) {\n                var lower = css.toLowerCase();\n                if (lower in css_colors) {\n                    css = css_colors[lower];\n                }\n\n                if (!css.match(/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/)) {\n                    return;\n                }\n\n                css = css.replace(/^#/, '');\n\n                var bytes = css.length / 3;\n\n                var max = Math.pow(16, bytes) - 1;\n\n                var rgb = factories.RGB();\n                rgb.red = parseInt(css.slice(0, bytes), 16) / max;\n                rgb.green = parseInt(css.slice(bytes * 1, bytes * 2), 16) / max;\n                rgb.blue = parseInt(css.slice(bytes * 2), 16) / max;\n                rgb.alpha = 1;\n                return rgb;\n            },\n\n            function(css) {\n                if (css.toLowerCase() !== 'transparent') return;\n\n                return transparent;\n            }\n        ],\n\n        _fromCSS: function(css) {\n            var color = null;\n            for (var i = 0, j = this._stringParsers.length; i < j; i++) {\n                color = this._stringParsers[i](css);\n                if (color) return color;\n            }\n        },\n\n        _fromRGB: function(RGB) {\n            var newRGB = factories.RGB();\n\n            newRGB.red = RGB.red;\n            newRGB.green = RGB.green;\n            newRGB.blue = RGB.blue;\n            newRGB.alpha = RGB.hasOwnProperty('alpha') ? RGB.alpha : 1;\n\n            return newRGB;\n        },\n\n        _fromRGBArray: function(RGB) {\n            var newRGB = factories.RGB();\n\n            newRGB.red = Math.max(0, Math.min(1, RGB[0] / 255));\n            newRGB.green = Math.max(0, Math.min(1, RGB[1] / 255));\n            newRGB.blue = Math.max(0, Math.min(1, RGB[2] / 255));\n            newRGB.alpha = RGB[3] !== undefined ? Math.max(0, Math.min(1, RGB[3])) : 1;\n\n            return newRGB;\n        },\n\n        // convert to a CSS string. defaults to two bytes a value\n        toCSSHex: function(bytes) {\n            bytes = bytes || 2;\n\n            var max = Math.pow(16, bytes) - 1;\n            var css = [\n                \"#\",\n                pad(Math.round(this.red * max).toString(16).toUpperCase(), bytes),\n                pad(Math.round(this.green * max).toString(16).toUpperCase(), bytes),\n                pad(Math.round(this.blue * max).toString(16).toUpperCase(), bytes)\n            ];\n\n            return css.join('');\n        },\n\n        toCSS: function(bytes) {\n            if (this.alpha === 1) return this.toCSSHex(bytes);\n\n            var max = 255;\n\n            var components = [\n                'rgba(',\n                Math.max(0, Math.min(max, Math.round(this.red * max))), ',',\n                Math.max(0, Math.min(max, Math.round(this.green * max))), ',',\n                Math.max(0, Math.min(max, Math.round(this.blue * max))), ',',\n                Math.max(0, Math.min(1, this.alpha)),\n                ')'\n            ];\n\n            return components.join('');\n        },\n\n        toHSV: function() {\n            var hsv = factories.HSV();\n            var min, max, delta;\n\n            min = Math.min(this.red, this.green, this.blue);\n            max = Math.max(this.red, this.green, this.blue);\n            hsv.value = max; // v\n\n            delta = max - min;\n\n            if (delta == 0) { // white, grey, black\n                hsv.hue = hsv.saturation = 0;\n            } else { // chroma\n                hsv.saturation = delta / max;\n\n                if (this.red == max) {\n                    hsv.hue = (this.green - this.blue) / delta; // between yellow & magenta\n                } else if (this.green == max) {\n                    hsv.hue = 2 + (this.blue - this.red) / delta; // between cyan & yellow\n                } else {\n                    hsv.hue = 4 + (this.red - this.green) / delta; // between magenta & cyan\n                }\n\n                hsv.hue = ((hsv.hue * 60) + 360) % 360; // degrees\n            }\n\n            hsv.alpha = this.alpha;\n\n            return hsv;\n        },\n        toHSL: function() {\n            return this.toHSV().toHSL();\n        },\n\n        toRGB: function() {\n            return this.clone();\n        }\n    });\n\n    transparent = color.fromObject({\n        red: 0,\n        blue: 0,\n        green: 0,\n        alpha: 0\n    });\n\n\n    /* Like RGB above, this object describes what will become the HSV\n     * template object. This model handles hue, saturation and value.\n     * hue is the number of degrees around the color wheel, saturation\n     * describes how much color their is and value is the brightness.\n     */\n    registerModel('HSV', {\n        hue: 0,\n        saturation: 0,\n        value: 1,\n        alpha: 1,\n\n        shiftHue: cloneOnApply(function(degrees) {\n            var hue = (this.hue + degrees) % 360;\n            if (hue < 0) {\n                hue = (360 + hue) % 360;\n            }\n\n            this.hue = hue;\n        }),\n\n        devalueByAmount: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value - val, 0));\n        }),\n\n        devalueByRatio: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value * (1 - val), 0));\n        }),\n\n        valueByAmount: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value + val, 0));\n        }),\n\n        valueByRatio: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value * (1 + val), 0));\n        }),\n\n        desaturateByAmount: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation - val, 0));\n        }),\n\n        desaturateByRatio: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation * (1 - val), 0));\n        }),\n\n        saturateByAmount: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation + val, 0));\n        }),\n\n        saturateByRatio: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation * (1 + val), 0));\n        }),\n\n        schemeFromDegrees: function(degrees) {\n            var newColors = [];\n            for (var i = 0, j = degrees.length; i < j; i++) {\n                var col = this.clone();\n                col.hue = (this.hue + degrees[i]) % 360;\n                newColors.push(col);\n            }\n            return newColors;\n        },\n\n        complementaryScheme: function() {\n            return this.schemeFromDegrees([0, 180]);\n        },\n\n        splitComplementaryScheme: function() {\n            return this.schemeFromDegrees([0, 150, 320]);\n        },\n\n        splitComplementaryCWScheme: function() {\n            return this.schemeFromDegrees([0, 150, 300]);\n        },\n\n        splitComplementaryCCWScheme: function() {\n            return this.schemeFromDegrees([0, 60, 210]);\n        },\n\n        triadicScheme: function() {\n            return this.schemeFromDegrees([0, 120, 240]);\n        },\n\n        clashScheme: function() {\n            return this.schemeFromDegrees([0, 90, 270]);\n        },\n\n        tetradicScheme: function() {\n            return this.schemeFromDegrees([0, 90, 180, 270]);\n        },\n\n        fourToneCWScheme: function() {\n            return this.schemeFromDegrees([0, 60, 180, 240]);\n        },\n\n        fourToneCCWScheme: function() {\n            return this.schemeFromDegrees([0, 120, 180, 300]);\n        },\n\n        fiveToneAScheme: function() {\n            return this.schemeFromDegrees([0, 115, 155, 205, 245]);\n        },\n\n        fiveToneBScheme: function() {\n            return this.schemeFromDegrees([0, 40, 90, 130, 245]);\n        },\n\n        fiveToneCScheme: function() {\n            return this.schemeFromDegrees([0, 50, 90, 205, 320]);\n        },\n\n        fiveToneDScheme: function() {\n            return this.schemeFromDegrees([0, 40, 155, 270, 310]);\n        },\n\n        fiveToneEScheme: function() {\n            return this.schemeFromDegrees([0, 115, 230, 270, 320]);\n        },\n\n        sixToneCWScheme: function() {\n            return this.schemeFromDegrees([0, 30, 120, 150, 240, 270]);\n        },\n\n        sixToneCCWScheme: function() {\n            return this.schemeFromDegrees([0, 90, 120, 210, 240, 330]);\n        },\n\n        neutralScheme: function() {\n            return this.schemeFromDegrees([0, 15, 30, 45, 60, 75]);\n        },\n\n        analogousScheme: function() {\n            return this.schemeFromDegrees([0, 30, 60, 90, 120, 150]);\n        },\n\n        fromObject: function(o) {\n            if (o.hasOwnProperty('hue') &&\n                o.hasOwnProperty('saturation') &&\n                o.hasOwnProperty('value')) {\n                var hsv = factories.HSV();\n\n                hsv.hue = o.hue;\n                hsv.saturation = o.saturation;\n                hsv.value = o.value;\n                hsv.alpha = o.hasOwnProperty('alpha') ? o.alpha : 1;\n\n                return hsv;\n            }\n            // nothing matches, not an HSV object\n            return null;\n        },\n\n        _normalise: function() {\n            this.hue %= 360;\n            this.saturation = Math.min(Math.max(0, this.saturation), 1);\n            this.value = Math.min(Math.max(0, this.value));\n            this.alpha = Math.min(1, Math.max(0, this.alpha));\n        },\n\n        toRGB: function() {\n            this._normalise();\n\n            var rgb = factories.RGB();\n            var i;\n            var f, p, q, t;\n\n            if (this.saturation === 0) {\n                // achromatic (grey)\n                rgb.red = this.value;\n                rgb.green = this.value;\n                rgb.blue = this.value;\n                rgb.alpha = this.alpha;\n                return rgb;\n            }\n\n            var h = this.hue / 60; // sector 0 to 5\n            i = Math.floor(h);\n            f = h - i; // factorial part of h\n            p = this.value * (1 - this.saturation);\n            q = this.value * (1 - this.saturation * f);\n            t = this.value * (1 - this.saturation * (1 - f));\n\n            switch (i) {\n                case 0:\n                    rgb.red = this.value;\n                    rgb.green = t;\n                    rgb.blue = p;\n                    break;\n                case 1:\n                    rgb.red = q;\n                    rgb.green = this.value;\n                    rgb.blue = p;\n                    break;\n                case 2:\n                    rgb.red = p;\n                    rgb.green = this.value;\n                    rgb.blue = t;\n                    break;\n                case 3:\n                    rgb.red = p;\n                    rgb.green = q;\n                    rgb.blue = this.value;\n                    break;\n                case 4:\n                    rgb.red = t;\n                    rgb.green = p;\n                    rgb.blue = this.value;\n                    break;\n                default: // case 5:\n                    rgb.red = this.value;\n                    rgb.green = p;\n                    rgb.blue = q;\n                    break;\n            }\n\n            rgb.alpha = this.alpha;\n\n            return rgb;\n        },\n        toHSL: function() {\n            this._normalise();\n\n            var hsl = factories.HSL();\n\n            hsl.hue = this.hue;\n            var l = (2 - this.saturation) * this.value,\n                s = this.saturation * this.value;\n            if (l && 2 - l) {\n                s /= (l <= 1) ? l : 2 - l;\n            }\n            l /= 2;\n            hsl.saturation = s;\n            hsl.lightness = l;\n            hsl.alpha = this.alpha;\n\n            return hsl;\n        },\n\n        toHSV: function() {\n            return this.clone();\n        }\n    });\n\n    registerModel('HSL', {\n        hue: 0,\n        saturation: 0,\n        lightness: 0,\n        alpha: 1,\n\n        darkenByAmount: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness - val, 0));\n        }),\n\n        darkenByRatio: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness * (1 - val), 0));\n        }),\n\n        lightenByAmount: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness + val, 0));\n        }),\n\n        lightenByRatio: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness * (1 + val), 0));\n        }),\n\n        fromObject: function(o) {\n            if (\"string\" == typeof o) {\n                return this._fromCSS(o);\n            }\n            if (o.hasOwnProperty('hue') &&\n                o.hasOwnProperty('saturation') &&\n                o.hasOwnProperty('lightness')) {\n                return this._fromHSL(o);\n            }\n            // nothing matchs, not an RGB object\n        },\n\n        _fromCSS: function(css) {\n            var colorGroups = trim(css).match(hsl_hsla_regex);\n\n            // if there is an \"a\" after \"hsl\", there must be a fourth parameter and the other way round\n            if (!colorGroups || (!!colorGroups[1] + !!colorGroups[5] === 1)) {\n                return null;\n            }\n\n            var hsl = factories.HSL();\n            hsl.hue = (colorGroups[2] % 360 + 360) % 360;\n            hsl.saturation = Math.max(0, Math.min(parseInt(colorGroups[3], 10) / 100, 1));\n            hsl.lightness = Math.max(0, Math.min(parseInt(colorGroups[4], 10) / 100, 1));\n            hsl.alpha = !!colorGroups[5] ? Math.max(0, Math.min(1, parseFloat(colorGroups[6]))) : 1;\n\n            return hsl;\n        },\n\n        _fromHSL: function(HSL) {\n            var newHSL = factories.HSL();\n\n            newHSL.hue = HSL.hue;\n            newHSL.saturation = HSL.saturation;\n            newHSL.lightness = HSL.lightness;\n\n            newHSL.alpha = HSL.hasOwnProperty('alpha') ? HSL.alpha : 1;\n\n            return newHSL;\n        },\n\n        _normalise: function() {\n            this.hue = (this.hue % 360 + 360) % 360;\n            this.saturation = Math.min(Math.max(0, this.saturation), 1);\n            this.lightness = Math.min(Math.max(0, this.lightness));\n            this.alpha = Math.min(1, Math.max(0, this.alpha));\n        },\n\n        toHSL: function() {\n            return this.clone();\n        },\n        toHSV: function() {\n            this._normalise();\n\n            var hsv = factories.HSV();\n\n            // http://ariya.blogspot.com/2008/07/converting-between-hsl-and-hsv.html\n            hsv.hue = this.hue; // H\n            var l = 2 * this.lightness,\n                s = this.saturation * ((l <= 1) ? l : 2 - l);\n            hsv.value = (l + s) / 2; // V\n            hsv.saturation = ((2 * s) / (l + s)) || 0; // S\n            hsv.alpha = this.alpha;\n\n            return hsv;\n        },\n        toRGB: function() {\n            return this.toHSV().toRGB();\n        }\n    });\n\n    // Package specific exports\n\n    /* the Color function is a factory for new color objects.\n     */\n    function Color(o) {\n        return color.fromObject(o);\n    }\n    Color.isValid = function(str) {\n        var key, c = Color(str);\n\n        var length = 0;\n        for (key in c) {\n            if (c.hasOwnProperty(key)) {\n                length++;\n            }\n        }\n\n        return length > 0;\n    };\n    net.brehaut.Color = Color;\n}).call(net.brehaut);\n\n/* Export to CommonJS\n */\nif (typeof module !== 'undefined') {\n    module.exports = net.brehaut.Color;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Oscilloscope from \"./objects/oscilloscope\";\nimport SpectralAnalyser from \"./objects/spectral-analyser\";\nimport Spectrogram from \"./objects/spectrogram\";\nimport Spectroscope from \"./objects/spectroscope\";\nimport TemporalAnalyser from \"./objects/temporal-analyser\";\n\nexport default async () => {\n    return {\n        \"temporalAnalyser~\": TemporalAnalyser,\n        \"spectralAnalyser~\": SpectralAnalyser,\n        \"scope~\": Oscilloscope,\n        \"spectroscope~\": Spectroscope,\n        \"spectrogram~\": Spectrogram\n    }\n};"],"names":["packageInfo","name","split","pop","replace","author","license","keywords","version","description","jspatcher","BaseObject","BaseAnalyserObject","DefaultObject","DefaultAnalyserObject","OscilloscopeUI","SpectralAnalyserNode","isBang","Oscilloscope","node","undefined","subscribe","on","inlets","outlets","props","_","parameters","windowFunction","applyBPF","get","indexOf","fftSize","fftOverlap","windowSize","register","audioCtx","audioWorklet","getProp","disconnectAudioInlet","inletAudioConnections","index","connectAudioInlet","data","inlet","updateUI","paint","destroy","isHot","type","default","enums","continuous","isUIState","frameRate","interleaved","stablize","range","autoRange","showStats","bgColor","phosphorColor","hueOffset","textColor","gridColor","seperatorColor","SpectralAnalyser","$requestTimer","startRequest","request","destroyed","extractorKeys","gets","forEach","key","push","got","outlet","scheduleRequest","window","setTimeout","e","clearTimeout","speedLim","buffer","lastAmplitudes","allAmplitudes","amplitude","estimatedFreq","centroid","flatness","flux","kurtosis","skewness","rolloff","slope","spread","SpectrogramUI","Spectrogram","SpectroscopeUI","Spectroscope","fgColor","TemporalAnalyserNode","TemporalAnalyser","absMax","rms","zcr","JSON","sdk","globalThis","jspatcherEnv","React","PatcherAudio","OperableAudioBuffer","Patcher","Box","Line","BaseUI","DefaultUI","CanvasUI","DefaultPopupUI","CodePopupUI","DOMUI","generateDefaultObject","generateRemoteObject","generateRemotedObject","Bang","TransmitterNode","MathUtils","BufferUtils","Utils","Color","componentDidMount","state","ctx","width","height","fullSize","fillStyle","fillRect","schedulePaint","object","left","bottom","l","sampleRate","clearRect","$read","$ui32","t","length","$","Atomics","load","channels","dl","yMin","yMax","yFactor","i","s","j","Math","max","abs","calcY","v","channelHeight","strokeStyle","vStep","beginPath","setLineDash","gridChannels","y","moveTo","lineTo","stroke","lineWidth","channelColor","$zerox","period","times","floor","$0","$1","drawL","thresh","isFinite","min","round","pixelsPerSamp","sampsPerPixel","save","clip","Path2D","rect","shiftHue","toHSL","maxInStep","minInStep","$j","samp","$step","x","restore","font","textAlign","textBaseline","fillText","toFixed","freqStatY","freq","document","createElement","getContext","offscreenCtx","dataFrames","canvas","offscreenVRes","getAllAmplitudes","f","$totalFrames","fftBins","bins","frames","$writeFrame","$writeFrameUi32","$lastFrame","$frame0","$frame1","osChannelHeight","step","vGrid","k","atodb","normalized","hue","lum","hStep","globalCompositeOperation","imageSmoothingEnabled","drawImage","sSplit","dSplit","getLastAmplitudes","gridX","closePath","fill"],"sourceRoot":""}